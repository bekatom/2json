-- AUTHORIZATION SULLIVAN1

                  Quick ISQL Serialization Test

This file contains instructions on how to conduct the Quick
Interactive SQL Serialization Test.  If an implementation has
passed the normal battery of concurrency tests in some embedded SQL
interface or module SQL interface, this quick test may be used
instead of the complete set of interactive concurrency tests to
establish that serialization applies to interactive SQL as well.  

This test is intended to provide evidence that serialization is
supported (turned "on") for interactive SQL with a minimum of
keystrokes.  Subtle faults involving the checking of constraints
will not be found by this test.

The following are general guidelines for performing this test:

1.   Each segment of the test is intended to start with a fresh
     transaction.  The previous transaction should always be ended
     with a COMMIT or a ROLLBACK to prevent interference.

2.   The ordering of SQL statements given below for testing should
     be adhered to whenever possible.  Each SQL statement should
     complete (as demonstrated by some implementation-defined
     message or prompt) before the next SQL statement is entered. 
     In the event of a "typo," simply retype the statement
     correctly.

3.   As a result of serialization, statements and/or transactions
     can be 1) terminated with errors or 2) blocked (put into a
     wait state) indefinitely.

     If the statement is terminated with an error, verify that the
     error is relevant to serialization (and is not a typo).  The
     message may contain the word "lock," "serialization,"
     "concurrency," etc.  Then proceed to the next statement.

     In the event of blockage, you may continue with the other
     (concurrent) transaction after a 1-minute wait (to see if this
     cures the blockage).

4.   <set transaction statement> is feature 11 of Transitional SQL.  If
     a vendor is not being tested for Transitional SQL, do not execute
     the SET TRANSACTION statements given below.  In order to pass test
     0562 for Transitional SQL, the three tests (0530, 0531, 0539) must be
     passed with the SET TRANSACTION statements intact, and the SET
     TRANSACTION statements must not be rejected.

Instructions for testing follow.

1.   Open two sessions, each with an AUTHORIZATION of SULLIVAN1. 
     We will be using table TT with numeric columns DOLLARS and
     ANUM.  We will refer to the two sessions as 'A' and 'B'.  User
     A should initialize table TT to known values:
          A:  DELETE FROM TT;
          A:  INSERT INTO TT VALUES (1, 3);
          A:  INSERT INTO TT VALUES (2, 4);
          A:  COMMIT WORK;

-- NOTE:  Table TT in Schema 4 (SULLIVAN1) was created as follows:
-- NOTE:  CREATE TABLE TT (DOLLARS NUMERIC(4), ANUM NUMERIC(4))

-- TEST:0562 Interactive serializability:  ISOLATION LEVEL!

2.   If testing for Transitional conformance, check that SET TRANSACTION
     is handled properly as follows, performing each SQL statement in sequence:
          B:  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
-- PASS:0562 If normal completion?
          B:  ROLLBACK WORK;
     Now proceed with the following tests.  In order to pass 0562, the other
     three tests must also pass with the SET TRANSACTION statements intact.

-- TEST:0530 Interactive SQL serializability:  dirty read!

3.   Check for dirty reads as follows, performing each SQL
     statement in sequence:
          A:  UPDATE TT SET DOLLARS = 3 WHERE DOLLARS = 2;
          B:  (For test 0562) SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
-- PASS:0562 If normal completion?
          B:  SELECT DOLLARS FROM TT WHERE ANUM = 4;
-- PASS:0530 If 1 row selected and DOLLARS = 2?
-- PASS:0530 OR ERROR, serialization failure?
          A:  ROLLBACK WORK;
          B:  ROLLBACK WORK;
     goal:     B should not see A's uncommitted UPDATE.

-- END TEST >>> 0530 <<< END TEST
-- *********************************************

-- TEST:0531 Interactive serializability:  non-repeatable read!

4.   Check for non-repeatable reads as follows, performing each SQL
     statement in sequence:
          A:  (For test 0562) SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
-- PASS:0562 If normal completion?
          A:  SELECT DOLLARS FROM TT WHERE ANUM = 4;
-- PASS:0531 If 1 row selected and DOLLARS = 2?
          B:  UPDATE TT SET DOLLARS = 3 WHERE DOLLARS = 2;
          B:  COMMIT WORK;
-- NOTE:0531 Session B may have any result on the UPDATE or COMMIT.
          A:  SELECT DOLLARS FROM TT WHERE ANUM = 4;
-- PASS:0531 If 1 row selected and DOLLARS = 2?
-- PASS:0531 OR ERROR, serialization failure?
          A:  ROLLBACK WORK;
     goal:     The result of A's two SELECTs should be the same
               (unless there is an error).

-- END TEST >>> 0531 <<< END TEST
-- *********************************************

-- TEST:0539 Interactive SQL serializability:  phantom read!

5.   Check for phantom reads as follows, performing each action in
     sequence:
          A:  (For test 0562) SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
-- PASS:0562 If normal completion?
          A:  SELECT * FROM TT WHERE DOLLARS > 1;
-- NOTE:0539 Save the result of this query; you will need it below.
          B:  INSERT INTO TT VALUES (6, 7);
          B:  COMMIT WORK;
-- NOTE:0539 Session B may have any result on the INSERT or COMMIT.
          A:  SELECT * FROM TT WHERE DOLLARS > 1;
-- PASS:0539 If result is same as result of previous query?
-- PASS:0539 AND (6, 7) does not appear in the result?
-- PASS:0539 OR ERROR, serialization failure?
-- NOTE:0539 The order of the rows is not significant.
          A:  ROLLBACK WORK;
     goal:     The result of A's two SELECTs should be the same
               (with the order of the rows being irrelevant).

-- END TEST >>> 0539 <<< END TEST

If it is necessary to repeat this test, make sure that the contents of
table TT are restored to their original values before starting over.

Contact NIST if you wish to propose improvements / corrections to these
tests.

-- *************************************************////END-OF-MODULE
