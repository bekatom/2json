NIST SQL Test Suite Version 6.0
Interactive SQL worksheet
for:  59-byte ID


-- This checklist is for SQL features required by FIPS 127-1
--   WITH Integrity Enhancement Feature (IEF).
-- IEF includes referential integrity, table check clauses, and
--   default column values.
-- This lists SQL-89 features, with corrections from SQL-92.
-- That is, this lists Entry SQL-92 minus most major enhancements over SQL-89:
--   delimited identifiers, renaming columns with AS, and SQLSTATE.


-- **********************************
-- Required FIPS 127-1 Standard Block
-- **********************************

-- MARK pass/fail:

Entry FIPS Syntax Flags
TESTNO Passes                 DESCRIPTION                              PROGRAM
 0296    1  _____  FIPS Flagger - vendor provided character function    flg005
 0297    1  _____  FIPS Flagger - vendor provided integer function      flg005
 0454    1  _____  SELECT nonGROUP column in GROUP BY                   flg008
 0831    1  _____  FIPS Flagger - ADD (column, ...)                     flg011
 0832    2  _____  FIPS Flagger - CREATE INDEX                          flg012
5 rows selected

Entry SQL
TESTNO Passes                 DESCRIPTION                              PROGRAM
 0001    1  _____  CURSOR with ORDER BY DESC                            dml001
 0002    1  _____  CURSOR with ORDER BY integer ASC                     dml001
 0003    1  _____  CURSOR with ORDER BY DESC integer, named column      dml001
 0004    1  _____  CURSOR with UNION: ORDER by integer DESC             dml001
 0005    1  _____  CURSOR with UNION ALL                                dml001
 0008    1  _____  SQLCODE = 100: FETCH on empty table                  dml004
 0009    3  _____  FETCH NULL value, get indicator = -1                 dml004
 0016    1  _____  SQLCODE < 0: 2 rows selected by single-row SELECT    dml008
 0017    1  _____  SELECT DISTINCT                                      dml008
 0018    1  _____  SQLCODE = 100: SELECT with no data                   dml008
 0019    1  _____  SQLCODE = 0: SELECT with data                        dml008
 0020    2  _____  SELECT NULL value, get indicator = -1                dml008
 0022    2  _____  INSERT (column list) VALUES (literals and NULL)      dml009
 0023    5  _____  SQLCODE < 0 if left-truncate DEC (>= col.def.)       dml009
 0024    1  _____  SQLCODE = 100: INSERT query spec. is empty           dml009
 0025    2  _____  SQLCODE = 0:  INSERT query spec. is not empty        dml009
 0026    4  _____  INSERT into view, check option & unique violations   dml009
 0027    2  _____  INSERT short string into long column-space padding   dml010
 0028    2  _____  INSERT string that exactly fits in column            dml010
 0031    2  _____  INSERT (column list) VALUES (variables and NULL)     dml010
 0033    2  _____  UPDATE view without WHERE clause - all rows          dml011
 0034    2  _____  UPDATE table with SET column in WHERE clause         dml011
 0035    2  _____  UPDATE with correlated subquery in WHERE clause      dml011
 0036    3  _____  UPDATE view globally with check option violation     dml011
 0037    4  _____  DELETE without WHERE clause - all rows               dml012
 0038    4  _____  DELETE with correlated subquery in WHERE clause      dml012
 0039    2  _____  COUNT DISTINCT function                              dml013
 0040    1  _____  SUM function with WHERE clause                       dml013
 0041    1  _____  MAX function in subquery                             dml013
 0042    1  _____  MIN function in subquery                             dml013
 0043    1  _____  AVG function                                         dml013
 0044    1  _____  AVG function: empty result NULL value                dml013
 0045    2  _____  BETWEEN predicate                                    dml014
 0046    2  _____  NOT BETWEEN predicate                                dml014
 0047    2  _____  IN predicate with subquery                           dml014
 0048    2  _____  NOT IN predicate with subquery                       dml014
 0049    2  _____  IN predicate with value list                         dml014
 0050    1  _____  LIKE predicate with % (percent)                      dml014
 0051    1  _____  LIKE predicate with _ (underscore)                   dml014
 0052    2  _____  LIKE predicate with ESCAPE character                 dml014
 0053    3  _____  NOT LIKE predicate                                   dml014
 0054    2  _____  IS NULL predicate                                    dml014
 0055    4  _____  NOT NULL predicate                                   dml014
 0056    1  _____  NOT EXISTS predicate                                 dml014
 0057    1  _____  ALL quantifier                                       dml014
 0058    1  _____  SOME quantifier                                      dml014
 0059    1  _____  ANY quantifier                                       dml014
 0061    2  _____  COMMIT WORK keeps changes to database                dml015
 0062    3  _____  ROLLBACK WORK cancels changes to database            dml015
 0064    1  _____  SELECT USER                                          dml016
 0065    2  _____  SELECT CHAR literal, term with numeric literal       dml016
 0066    3  _____  SELECT numeric literal                               dml016
 0069    1  _____  HAVING COUNT with WHERE, GROUP BY                    dml018
 0070    1  _____  HAVING COUNT with GROUP BY                           dml018
 0071    3  _____  HAVING MIN, MAX with GROUP BY 3 columns              dml018
 0072    1  _____  Nested HAVING IN, with no outer reference            dml018
 0073    1  _____  HAVING MIN with no GROUP BY                          dml018
 0074    3  _____  GROUP BY column: SELECT column, SUM                  dml019
 0075    1  _____  GROUP BY clause                                      dml019
 0076    2  _____  GROUP BY 2 columns                                   dml019
 0077    1  _____  GROUP BY all columns, with SELECT *                  dml019
 0078    1  _____  GROUP BY 3 columns, SELECT 2 of them                 dml019
 0079    5  _____  GROUP BY NULL value                                  dml019
 0080    2  _____  Simple 2-table join                                  dml020
 0081    1  _____  Simple 2-table join with 1-table predicate           dml020
 0082    1  _____  Join 3 tables                                        dml020
 0083    2  _____  Join a table with itself                             dml020
 0084    2  _____  Data type CHAR(20)                                   dml021
 0085    2  _____  Data type CHARACTER(20)                              dml021
 0086    2  _____  Data type INTEGER                                    dml021
 0087    2  _____  Data type INT                                        dml021
 0088    4  _____  Data type REAL                                       dml034
 0089    2  _____  Data type SMALLINT                                   dml021
 0090    4  _____  Data type DOUBLE PRECISION                           dml034
 0091    4  _____  Data type FLOAT                                      dml034
 0092    4  _____  Data type FLOAT(32)                                  dml034
 0093    4  _____  Data type NUMERIC(13,6)                              dml034
 0094    3  _____  Data type DECIMAL(13,6)                              dml034
 0095    3  _____  Data type DEC(13,6)                                  dml034
 0096    1  _____  Subquery with MAX in < comparison predicate          dml022
 0097    1  _____  Subquery with AVG - 1 in <= comparison predicate     dml022
 0098    1  _____  IN predicate with simple subquery                    dml022
 0099    1  _____  Nested IN predicate - 2 levels                       dml022
 0100    2  _____  Nested IN predicate - 6 levels                       dml022
 0101    1  _____  Quantified predicate <= ALL with AVG and GROUP BY    dml022
 0102    1  _____  Nested NOT EXISTS with corr. subqueries, DISTINCT    dml022
 0103    1  _____  Subquery with = comparison predicate                 dml023
 0104    2  _____  SQLCODE < 0: subquery with more than 1 value         dml023
 0105    2  _____  Subquery in comparison predicate is empty            dml023
 0106    1  _____  Comparison predicate <> (not equal)                  dml023
 0107    2  _____  Short string logically blank-padded in = pred.       dml023
 0108    1  _____  Search condition true OR NOT (true)                  dml024
 0109    1  _____  Search condition true AND NOT (true)                 dml024
 0110    2  _____  Search condition unknown OR NOT (unknown)            dml024
 0111    2  _____  Search condition unknown AND NOT (unknown)           dml024
 0112    2  _____  Search condition unknown AND true                    dml024
 0113    3  _____  Search condition unknown OR true                     dml024
 0114    2  _____  Set functions without GROUP BY returns 1 row         dml025
 0115    1  _____  GROUP BY 0 groups returns 0 rows: SEL col.,AVG...    dml025
 0116    1  _____  GROUP BY 0 groups returns 0 rows: SELECT set fnc.    dml025
 0117    2  _____  Set functions with GROUP BY several groups           dml025
 0118    1  _____  Monadic arithmetic operator + (plus)                 dml026
 0119    1  _____  Monadic arithmetic operator - (minus)                dml026
 0120    6  _____  Value expression with NULL primary yields NULL       dml026
 0121    2  _____  Dyadic arithmetic operators +, -, *, /               dml026
 0122    1  _____  SQLCODE < 0: divisor shall not be zero               dml026
 0123    1  _____  Evaluation order of expression                       dml026
 0124    2  _____  UPDATE UNIQUE column (key=key+1) interim conflict    dml027
 0125    2  _____  UPDATE UNIQUE column (key+1): no interim conflict    dml027
 0129    2  _____  Double quote mark (') in character string literal    dml029
 0130    2  _____  Approximate numeric literal <mantissa>E<exponent>    dml029
 0131    2  _____  Approximate numeric literal with neg. exponent       dml029
 0135    3  _____  Upper and lower case letters are distinct            dml033
 0137    4  _____  CREATE SCHEMA                                        sdl001
 0138    3  _____  GRANT ALL PRIVILEGES TO PUBLIC (SELECT, INSERT)      sdl002
 0139    3  _____  GRANT ALL PRIVILEGES TO PUBLIC (SELECT, UPDATE)      sdl003
 0140    3  _____  Priv.violation: GRANT SELECT TO PUBLIC, no INSERT    sdl004
 0141    3  _____  GRANT SELECT and UPDATE to individual                sdl005
 0142    3  _____  GRANT SELECT and UPDATE WITH GRANT OPTION            sdl006
 0143    3  _____  GRANT SELECT and UPDATE on VIEW                      sdl007
 0144    4  _____  Priv.violation: colunm not in UPDATE column list     sdl008
 0145    1  _____  Fully qualified column specification                 sdl009
 0146    6  _____  GRANT SELECT, DELETE, INSERT                         sdl010
 0147    2  _____  CREATE SCHEMA                                        sdl011
 0148    2  _____  CREATE TABLE with NOT NULL                           sdl012
 0149    4  _____  CREATE TABLE with NOT NULL UNIQUE                    sdl013
 0150    5  _____  CREATE TABLE with UNIQUE(...): INSERT VALUES         sdl014
 0151    1  _____  CREATE VIEW                                          sdl015
 0152    5  _____  CREATE VIEW with CHECK OPTION                        sdl016
 0153    1  _____  CREATE VIEW joining 3 tables                         sdl017
 0154    4  _____  Schema def.- same table name for different schemas   sdl018
 0155    3  _____  CREATE TABLE with UNIQUE(...): INSERT via SELECT     sdl019
 0156    5  _____  Tables are multi-sets, dup. INSERTed via subquery    sdl020
 0157    8  _____  CURSOR with ORDER BY approximate numeric             dml035
 0158    1  _____  CURSOR with UNION and NOT EXISTS subquery            dml001
 0159    1  _____  CURSOR with 2 UNIONs, ORDER BY 2 integers            dml001
 0160    1  _____  CURSOR with UNION, UNION ALL and ORDER BY            dml001
 0164    1  _____  Default of SELECT is ALL, not DISTINCT               dml008
 0167    2  _____  SUM ALL function                                     dml013
 0168    2  _____  SUM function                                         dml013
 0169    2  _____  COUNT (*) function                                   dml013
 0170    1  _____  SUM DISTINCT function with WHERE clause              dml013
 0171    1  _____  SUM (column) + literal                               dml013
 0173    2  _____  Data type CHAR                                       dml021
 0174    2  _____  Data type CHARACTER                                  dml021
 0175    2  _____  Data type NUMERIC                                    dml021
 0176    2  _____  Data type NUMERIC(9): SELECT *                       dml021
 0177    2  _____  Data type NUMERIC(9): SELECT column                  dml021
 0178    2  _____  Data type DECIMAL                                    dml021
 0179    2  _____  Data type DECIMAL(8)                                 dml021
 0180    4  _____  NULLs sort together in ORDER BY                      dml023
 0181    3  _____  NULLs are equal for DISTINCT                         dml023
 0182    2  _____  Approx. num. literal with neg. mantissa and exp.     dml029
 0199    3  _____  Priv.violation: GRANT SELECT to PUBLIC, no DELETE    sdl021
 0200    3  _____  Priv.violation: GRANT INSERT to indiv., no SELECT    sdl022
 0201    4  _____  Priv.violation: GRANT without GRANT OPTION           sdl023
 0203    4  _____  CREATE VIEW on VIEW                                  sdl024
 0204    7  _____  Updatable VIEW with AND, OR in CHECK clause          sdl025
 0205    1  _____  Cartesian product is produced without WHERE          dml038
 0208    4  _____  LIKE predicate with underscore is case sensitive     dml039
 0209    1  _____  Join 2 tables from different schemas                 dml040
 0212    8  _____  Enforcement of CHECK clauses in nested views         dml041
 0227    2  _____  BETWEEN predicate with character string values       dml051
 0228    2  _____  NOT BETWEEN predicate with character string value    dml051
 0229    3  _____  LIKE predicate is case sensitive                     dml052
 0233    3  _____  Tables are multi-sets: duplicate via INSERT VALUE    dml053
 0234    2  _____  SQL comments (double hyphen) in SQL statements       dml037
 0237    4  _____  Identifier length 18                                 sdl026
 0251    6  _____  COMMIT keeps changes of current transaction          dml058
 0252    5  _____  ROLLBACK cancels changes of current transaction      dml058
 0253    8  _____  TEST0124 workaround (key = key+1)                    dml058
 0254    3  _____  Column name in SET clause                            dml058
 0255    5  _____  Key word USER for INSERT, UPDATE                     dml058
 0256    5  _____  Key word USER in WHERE clause                        dml058
 0257    7  _____  SELECT MAX, MIN (COL1 + or - COL2)                   dml059
 0258    5  _____  SELECT SUM (:var * COL1 * COL2)                      dml059
 0259    3  _____  SOME, ANY in GROUP BY, HAVING clause                 dml059
 0260    3  _____  EXISTS in GROUP BY, HAVING                           dml059
 0261    3  _____  WHERE (:var * (COL1 - COL2)) BETWEEN                 dml060
 0262    4  _____  WHERE clause with computation, ANY/ALL subqueries    dml060
 0263    4  _____  Computed column in ORDER BY                          dml060
 0264    2  _____  WHERE, HAVING without GROUP BY                       dml059
 0265    5  _____  UPDATE : positioned - view with check option         dml060
 0266    6  _____  UPDATE : positioned - UNIQUE violation under view    dml060
 0267    2  _____  UPDATE compound key, interim uniqueness conflicts    dml060
 0269    3  _____  BETWEEN value expressions in wrong order             dml061
 0270    1  _____  BETWEEN approximate and exact numeric values         dml061
 0271    1  _____  COUNT(*) with Cartesian product subset               dml061
 0272    4  _____  Statement rollback for integrity violation           dml061
 0273    3  _____  SUM, MAX, MIN = NULL (not 0) for empty arguments     dml061
 0274    5  _____  COMMIT and ROLLBACK across schemas                   dml062
 0275    7  _____  COMMIT and ROLLBACK of multiple cursors              dml062
 0276    4  _____  View across schemas                                  dml062
 0277    5  _____  Computation with NULL value specification            dml061
 0278    2  _____  IN value list with USER, literal,variable spec.      dml061
 0279    6  _____  IN is a 3-valued predicate, EXISTS is 2-valued       dml062
 0281    3  _____  Updatable VIEW with ALL, IN, BETWEEN                 dml064
 0282    3  _____  Updatable VIEW with LIKE, NULL, >, =, <              dml064
 0283    3  _____  Updatable VIEW with view, correlation name, NOT      dml064
 0284    3  _____  INSERT,SELECT character strings with blanks          dml065
 0285    1  _____  INSERT,SELECT integers with various formats          dml065
 0300    2  _____  DEFAULT value literal & number in a table            cdr001
 0301    1  _____  DEFAULT value USER in a table                        cdr001
 0302    3  _____  CHECK <comp. predicate> in <tab. cons.>, insert      cdr002
 0303    3  _____  CHECK <comp. predicate> in <col. cons.>, insert      cdr002
 0304    3  _____  CHECK <between predicate> in <tab. cons.>, insert    cdr002
 0305    3  _____  CHECK <null predicate> in <tab. cons.>, insert       cdr002
 0306    3  _____  CHECK X IS NOT NULL, NOT X IS NULL are equivalent    cdr003
 0307    3  _____  CHECK <like predicate> in <tab. cons>, insert        cdr003
 0308    3  _____  CHECK <in predicate> in <tab. cons.>, insert         cdr003
 0309    3  _____  CHECK combination predicates in <tab. cons.>         cdr004
 0310    3  _____  CHECK X NOT IN, NOT X IN equivalent, insert          cdr004
 0311    3  _____  CHECK NOT NULL in col.cons., insert, null explicit   cdr004
 0312    3  _____  CHECK NOT NULL in col.cons., insert, null implicit   cdr004
 0313    2  _____  CHECK <comp. predicate> in <tab. cons.>, update      cdr005
 0314    2  _____  CHECK <comp. predicate> in <col. cons.>, update      cdr005
 0315    2  _____  CHECK <between predicate> in <tab. cons.>, update    cdr005
 0316    2  _____  CHECK <null predicate> in <tab. cons.>, update       cdr006
 0317    2  _____  CHECK X IS NOT NULL, NOT X IS NULL same, by update   cdr006
 0318    2  _____  CHECK <like predicate> in <tab. cons.>, update       cdr006
 0319    2  _____  CHECK <in predicate> in <tab. cons.>, update         cdr007
 0320    3  _____  CHECK combination pred. in <tab. cons.>, update      cdr007
 0321    2  _____  CHECK if X NOT LIKE/IN, NOT X LIKE/IN same, update   cdr007
 0322    2  _____  CHECK <null predicate> in <col. cons>, update        cdr007
 0323    1  _____  (2 pr.,1 son),both P.K e, F.K e,insert another F.K   cdr008
 0324    3  _____  (2 pr.,1 son),1 P.K exist,another not. insert F.K    cdr008
 0325    2  _____  (2 pr.,1 son),both P.K e, F.K e, delete 1 P.K        cdr008
 0326    2  _____  (2 pr.,1 son),P.K e, no F.K, modify P.K              cdr008
 0327    3  _____  (2 pr.,1 son),check PRIMARY KEY unique via insert    cdr009
 0328    2  _____  (2 pr.,1 son),F.K exist,modify P.K                   cdr009
 0329    3  _____  (2 pr.,1 son),check PRIMARY KEY unique via modify    cdr009
 0330    2  _____  (2 pr.,1 son),modify F.K to no P.K corr.             cdr009
 0331    2  _____  (2 pr.,1 son),modify F.K to P.K corr. value          cdr009
 0332    1  _____  (self ref.), P.K exist, insert a F.K                 cdr010
 0333    2  _____  (self ref.), delete P.K but F.K exist.               cdr010
 0334    1  _____  (self ref.), update P.K, no corr. F.K                cdr010
 0335    2  _____  (self ref.), insert a F.K but no corr. P.K           cdr011
 0336    2  _____  (self ref.), update P.K, but corr. F.K e.            cdr011
 0337    2  _____  (self ref.), update P.K, check P.K unique via var.   cdr011
 0338    2  _____  (self ref.), update F.K and no corr. P.K             cdr011
 0339    1  _____  (self ref.), update F.K and corr. P.K exist          cdr011
 0340    1  _____  (ref. each other), insert F.K and corr. P.K e        cdr012
 0341    2  _____  (ref. each other), delete P.K but corr. F.K e        cdr012
 0342    1  _____  (ref. each other), update P.K and no corr. F.K       cdr012
 0343    2  _____  (ref. each other), update P.K and corr. F.K e        cdr013
 0344    2  _____  (ref. each other), update F.K to no corr. P.K        cdr013
 0345    1  _____  (ref. each other), update F.K to corr. P.K e         cdr013
 0346    2  _____  (ref. each other), insert F.K and no corr. P.K       cdr013
 0365    2  _____  (3-level schema), check insert F.K                   cdr019
 0366    2  _____  (3-level schema), check delete P.K                   cdr019
 0367    3  _____  (3-level schema), update mid. tab. check P.K & F.K   cdr019
 0368    2  _____  (3-level schema), check update P.K                   cdr019
 0369    1  _____  update P. K, set F1=F1+1, interim violation          cdr020
 0370    1  _____  update F. K, set F1=F1+1, interim violation          cdr020
 0371    2  _____  update self-ref table, interim violation             cdr020
 0372    1  _____  delete self-ref table, interim violation             cdr020
 0374    3  _____  computation in update, CHECK clause                  cdr003
 0375    3  _____  ref. integrity with computation                      cdr017
 0376    1  _____  ref. integrity with join                             cdr017
 0377    5  _____  DEFAULT value with explicit NULL                     cdr001
 0378    2  _____  (ref. acr. sch.) delete P.K and corr. F.K e.         cdr021
 0379    2  _____  (ref. acr. sch.) update P.K and corr. F.K e.         cdr021
 0380    2  _____  (ref. acr. sch.) insert F.K and no corr. P.K         cdr022
 0381    2  _____  (ref. acr. sch.) update F.K to no P.K corr.          cdr022
 0382    2  _____  (ref. acr. sch.) with GRANT OPTION, insert           cdr023
 0383    3  _____  Priv.violation: GRANT without GRANT OPTION           cdr023
 0384    3  _____  Priv.violation: SELECT, but not REFERENCES           cdr023
 0385    4  _____  character default column values                      cdr024
 0386    4  _____  exact numeric default column values                  cdr024
 0387    4  _____  approximate numeric default column values            cdr024
 0391    4  _____  Correlation names used in self-join of view          sdl027
 0393    1  _____  SUM, MAX on Cartesian product                        dml073
 0394    1  _____  AVG, MIN on joined table with WHERE                  dml073
 0395    7  _____  SUM, MIN on joined table with GROUP BY               dml073
 0396    4  _____  SUM, MIN on joined table with WHERE,GROUP,HAVING     dml073
 0397    2  _____  Grouped view                                         sdl028
 0401    6  _____  View with computed columns (degrees F to C)          sdl027
 0402    4  _____  Computed GROUP BY view over referencing tables       cdr025
 0406    1  _____  Subquery from different schema                       dml069
 0408    4  _____  UPDATE references column value BEFORE update         dml069
 0409    7  _____  Effective outer join--join with two cursors          dml070
 0411    3  _____  Effective set difference                             dml070
 0412    3  _____  Effective set intersection                           dml070
 0413    3  _____  Computed SELECT on computed VIEW                     cdr025
 0417    6  _____  Cartesian product GROUP BY 2 columns with NULLs      dml073
 0418    4  _____  AVG,SUM,COUNT on Cartesian product with NULLs        dml073
 0419    1  _____  SUM, MAX, MIN on joined table view                   dml073
 0420    1  _____  View with multiple SELECT of same column             sdl028
 0431    2  _____  Redundant rows in IN subquery                        dml075
 0432    6  _____  Unknowns in subquery of ALL, SOME, ANY               dml075
 0433    6  _____  Empty subquery of ALL, SOME, ANY                     dml075
 0434    3  _____  GROUP BY with HAVING EXISTS-correlated set fnc       dml075
 0436   11  _____  NULL values for various SQL data types               dml076
 0438    6  _____  (partial-NULL F.K) F.K INSERT supported              cdr026
 0439   13  _____  (partial-NULL F.K) F.K UPDATE supported              cdr026
 0440    4  _____  (partial-NULL F.K) no restrict P.K update/delete     cdr026
 0442    6  _____  DISTINCT with GROUP BY, HAVING                       dml075
 0443    9  _____  VIEW with check option rejects unknown (NULL)        dml077
 0446    9  _____  Table CHECK constraint allows unknown (NULL)         cdr027
 0447    5  _____  NULLs with check constraint and check option         cdr027
 0448    4  _____  PRIMARY KEY implies UNIQUE                           cdr027
 0449    4  _____  Constraint definition is case sensitive              cdr027
 0450   14  _____  Referential integrity is case sensitive              cdr027
 0451   18  _____  UNIQUEness is case sensitive                         dml079
 0452    2  _____  Order of precedence, left-to-right in UNION [ALL]    dml079
 0453    7  _____  NULL with empty subquery of ALL, SOME, ANY           dml079
 0458    7  _____  Priv.violation: GRANT only SELECT to individual      sdl029
 0459    4  _____  Priv.violation: GRANT only INSERT to individual      sdl029
 0460    4  _____  Priv.violation: GRANT only UPDATE to individual      sdl029
 0461    4  _____  Priv.violation: GRANT only DELETE to individual      sdl029
 0462    4  _____  SQLCODE 100: DELETE with no data                     dml080
 0463    5  _____  SQLCODE 100: UPDATE with no data                     dml080
 0464    7  _____  Priv.violation: GRANT only SELECT to PUBLIC          sdl030
 0465    4  _____  Priv.violation: GRANT only INSERT to PUBLIC          sdl030
 0466    4  _____  Priv.violation: GRANT only UPDATE to PUBLIC          sdl030
 0467    4  _____  Priv.violation: GRANT only DELETE to PUBLIC          sdl030
 0468    4  _____  Priv.violation: individual without any privileges    sdl031
 0469    4  _____  GRANT ALL PRIVILEGES to individual                   sdl031
 0470    4  _____  GRANT ALL PRIVILEGES to public                       sdl031
 0471    1  _____  Priv.violation: GRANT privilege not grantable        sdl031
 0472   11  _____  Priv.violation: individual SELECT, column UPDATE     sdl032
 0473   12  _____  Priv.violation: GRANT all on view but not table      sdl033
 0474    2  _____++Priv.violation: need SELECT for searched UPDATE      sdl034
 0475    1  _____  Priv.violation: GRANT ALL w/o GRANT OPTION           sdl034
 0476    1  _____  Priv.violation: GRANT OPTION view but not table      sdl034
 0477    7  _____  Priv.violation: GRANT only SELECT on view            sdl035
 0478    4  _____  Priv.violation: GRANT only INSERT on view            sdl035
 0479    4  _____  Priv.violation: GRANT only UPDATE on view            sdl035
 0480    4  _____  Priv.violation: GRANT only DELETE on view            sdl035
 0481    4  _____  Priv.violation: no privileges on view                sdl036
 0482    4  _____  GRANT ALL PRIVILEGES on view                         sdl036
 0483    1  _____  Priv.violation: GRANT UPDATE not grantable on view   sdl036
 0484   11  _____  Priv.violation: SELECT and column UPDATE on view     sdl032
 0486    7  _____  Priv.violation: illegal REFERENCES                   cdr028
 0495    1  _____  Priv.violation: illegal GRANT to self                sdl037
 0512    3  _____  <value expression> for IN predicate                  dml090
 0513    6  _____  NUMERIC(4) implies CHECK BETWEEN -9999 AND 9999      dml090
 0518    4  _____  CREATE VIEW with DISTINCT                            dml087
 0519    6  _____  CREATE VIEW with subqueries                          dml087
 0520   10  _____  Underscores are legal and significant                dml087
 0522    2  _____  No implied natural join on FROM T1, T2               cdr029
 0523    3  _____  <value expression> for BETWEEN predicate             dml090
 0527    4  _____  Priv. violation:  HU                                 dml142
 0529    1  _____  Priv. violation:  SELECT in <insert statement>       dml143
 0530    2  _____**Interactive SQL serializability:  dirty read         mpquic
 0531    3  _____**Interactive serializability:  non-repeatable read    mpquic
 0537    9  _____  Table check constraint:  column vs. column           cdr029
 0538    8  _____  With check option:  column vs. column                cdr029
 0539    3  _____**Interactive SQL serializability:  phantom read       mpquic
 0564    1  _____  Outer ref. directly contained in HAVING clause       dml090
350 rows selected
** interactive concurrency test - append log
++ actually an SQL-92 new requirement, but a good idea!



-- ********************************
-- Optional FIPS Sizing Block
-- ********************************

-- MARK pass/fail:

FIPS Sizing Tests -- Entry SQL
TESTNO Passes                 DESCRIPTION                              PROGRAM
 0011    3  _____  FIPS sizing - DECIMAL(15)                            dml005
 0213    2  _____  FIPS sizing - 100 columns in a row                   dml042
 0214    7  _____  FIPS sizing - 2000 byte-row                          dml043
 0215    3  _____  FIPS sizing - 6 columns in a UNIQUE specification    dml044
 0216    4  _____  FIPS sizing - 120 bytes in a UNIQUE specification    dml044
 0218    7  _____  FIPS sizing - 6 columns in GROUP BY                  dml045
 0219    8  _____  FIPS sizing - 120 bytes in GROUP BY                  dml045
 0220    7  _____  FIPS sizing - 6 columns in ORDER BY                  dml046
 0221    7  _____  FIPS sizing - 120 bytes in ORDER BY                  dml046
 0222    3  _____  FIPS sizing - CHARACTER(240)                         dml047
 0225    8  _____  FIPS sizing - 10 tables in FROM clause               dml049
 0226    1  _____  FIPS sizing - 10 tables in nested SQL statements     dml050
 0243    4  _____  FIPS sizing - precision of SMALLINT >= 4             dml055
 0244    4  _____  FIPS sizing - precision of INTEGER >= 9              dml055
 0245    6  _____  FIPS sizing - precision of DECIMAL >= 15             dml055
 0246    4  _____  FIPS sizing - 100 values in INSERT                   dml056
 0247    4  _____  FIPS sizing - 20 values in update SET clause         dml056
 0248    8  _____  FIPS sizing - binary precision of FLOAT >= 20        dml057
 0249    8  _____  FIPS sizing - binary precision of REAL >= 20         dml057
 0250    8  _____  FIPS sizing - binary precision of DOUBLE >= 30       dml057
 0347    2  _____  FIPS sz. (comb.keys=6), P.K unique,insert            cdr014
 0348    2  _____  FIPS sz. (comb.keys=6), insert F.K & no corr. P.K    cdr014
 0349    2  _____  FIPS sz. (comb.keys=6), delete P.K & corr. F.K e     cdr015
 0350    1  _____  FIPS sz. (comb.keys=6), update P.K & no corr. F.K    cdr015
 0351    2  _____  FIPS sz. (comb.keys=6), update P.K & corr. P.K e     cdr015
 0352    3  _____  FIPS sz. (comb.keys=6), P.K unique, update           cdr016
 0353    2  _____  FIPS sz. (comb.keys=6), update F.K to no corr. P.K   cdr016
 0354    1  _____  FIPS sz. (comb.keys=6), update F.K to corr. P.K e    cdr016
 0355    3  _____  FIPS sz. (1 pr.,6 son), insert F.K & no corr. P.K    cdr017
 0356    2  _____  FIPS sz. (1 pr.,6 son), delete P.K & corr. F.K e     cdr017
 0357    3  _____  FIPS sz. (1 pr.,6 son), update P.K but corr. F.K e   cdr017
 0358    3  _____  FIPS sz. (1 pr.,6 son), check key unique, update     cdr017
 0359    2  _____  FIPS sz. (1 pr.,6 son), update F.K to no corr. P.K   cdr017
 0360    3  _____  FIPS sz. (6 pr.,1 son), insert F.K, without P.K      cdr018
 0361    2  _____  FIPS sz. (6 pr.,1 son), delete P.K, but corr.F.K e   cdr018
 0362    3  _____  FIPS sz. (6 pr.,1 son), update P.K, but corr.F.K e   cdr018
 0363    3  _____  FIPS sz. (6 pr.,1 son), check key unique ,update     cdr018
 0364    2  _____  FIPS sz. (6 pr.,1 son), update F.K to no corr. P.K   cdr018
 0388    4  _____  FIPS sz. default column values                       cdr024
 0515    9  _____  FIPS sizing:  NUMERIC (15) decimal precision         dml132
 0524    6  _____  FIPS sizing:  100 Items in a SELECT list             dml132
 0525    3  _____  FIPS sizing:  15 Table references in SQL statement   dml132
 0526    5  _____  FIPS sizing:  Length FOREIGN KEY column list = 120   cdr031
43 rows selected



-- ***************************************
-- Optional FIPS Informational Block
-- These results are informational
-- ***************************************

-- MARK pass/fail:

Optional/Informational -- Entry Catalog-Lookup Flagging
TESTNO Passes                 DESCRIPTION                              PROGRAM
 0299    1  _____  FIPS Flagger - identifier length > 18                flg006
 0455    3  _____  Relaxed union compatability rules for columns        flg009
2 rows selected

Optional/Informational -- Miscellaneous Informational
TESTNO Passes                 DESCRIPTION                              PROGRAM
 0389    5  _____  95-char ASCII collating sequence (PL vs. SQL)        dml068
 0403    4  _____  View on computed GROUP BY view with joins            cdr025
 0504   10  _____  SQLSTATE 42000: syntax error or access rule vio.2    dml084
3 rows selected

=====================================================

NIST SQL Test Suite Version 6.0
Interactive SQL summary
for:  59-byte ID


*** Required FIPS 127-2 Standard Block ***

  Entry FIPS Syntax Flags               (  5)
   supported and flagged         (pass)        _____
   supported and not flagged     (fail)        _____
   not supported/syntax error    (nogo)        _____
                                 
  Entry SQL                             (350)
                                  pass         _____
                                  fail         _____

*** Optional FIPS Sizing Block ***

   FIPS Sizing Tests -- Entry SQL       ( 43)
                                  pass         _____
                                  fail         _____

*** Optional FIPS Informational Block ***

  Entry FIPS Syntax Flags Block         (  2)
   supported and flagged      (pass)           _____
   supported and not flagged  (fail)           _____
   not supported/syntax error (nogo)           _____

  Miscellaneous Informational           (  3)
                                  pass         _____
                                  fail         _____

*** Not Applicable ***                         _496__


                            
  TOTAL                                 (899)
                                   TOTAL      ========

